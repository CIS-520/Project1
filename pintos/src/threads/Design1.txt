
CIS 520 - Programming Project #1

                   
---- GROUP ----

Luis Bobadilla happystep@ksu.edu
MaryGrace Blair mgblair@ksu.edu
Paula Mendez paulipotter@ksuedu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
#Luis

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
	if ticks is less than or equal to zero, then return
	if not, then get the current number of global ticks -> timer_ticks()
			get thread by calling thread_current() and store it 
			set the wakeup ticks to the start + ticks (start from timer_ticks and ticks as argument)	
			block the thread, and push it to the back of the queue
			disable the interrupt - the CPU won't be able to turn the interrupt back on

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
   int orig_priority;
   struct list blocked_l;
   struct thread *blocked;


>> B2: Explain the data structure used to track priority donation.
    In order to make sure the highest priority is the thread that runs 
    next, we use thread_get_priority to find the thread that contains 
    the highest priority, remove it from the list and and set it for it 
    to be the next_thread_to_run

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
	In order to wake up the highest priority thread, 
    we run thread_get_priority until we get the thread the highest priority 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?
    after the asserts from the source code, we disabled interrupts.
    We get the current thread and the one thats blocking. if the lock 
    is not null check if the current priority is larger than the 
    holder's priority. If so, then donate the current thread's priority 
    to the one holding the lock.
    
    Nested donation is handled through the donate method. it is setting the 
    thread pointer to the one it is donating to.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
    we get the thread with the highest priority (max) and then add the 
    threads in the waiting list.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?
    if it was called on a thread that already donated its 
    priority to the current thread or if it was called 
    multiple times for a single thread. 
    This implementation disables interrupts for the functions
    that changes a thread's priority. 

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
    If we chose to sort the list every time a thread was added, then the 
    action of blocking the thread would be delayed and be less efficient.
    instead, we don't sort it every time and when we run the algorithm, 
    the thread needed is already blocked. That way, other threads are not 
    delayed.

              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

